name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [21.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/back-chat-app:latest

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies Backend
        run: |
          cd backend
          npm ci

      - name: Build Backend
        run: |
          cd backend
          npm run build --if-present

      - name: Start Backend
        run: |
          cd backend
          npm start &
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Wait for Backend to Start
        run: |
          # Wait for the backend to be available
          timeout 60s bash -c 'until curl -s http://localhost:3000; do sleep 1; done'

      - name: Run Postman Tests
        run: |
          npm install -g newman
          newman run postman/projet-web-efrei.postman_collection -e postman/ENV.postman_environment

      - name: Test Backend
        run: |
          cd backend
          npm run test

      - name: Run Migrate Database
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy Backend on Render
        run: |
          curl -n ${{ secrets.DEPLOY_URL }}

      - name: Install Dependencies Frontend
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build --if-present

      - name: Deploy Frontend on Render
        run: |
          curl -n ${{ secrets.DEPLOY_FRONT_URL }}
