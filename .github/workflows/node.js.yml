name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  setup-services:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies Backend
        run: |
          cd backend
          npm ci

      - name: Run Migrate Database
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb

      - name: Start Backend
        run: |
          cd backend
          npm start &
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379

      - name: Wait for Backend to be Ready
        run: |
          sleep 10

  test-backend:
    runs-on: ubuntu-latest
    needs: setup-services

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies Backend
        run: |
          cd backend
          npm ci

      - name: Test Backend
        run: |
          cd backend
          npm run test

      - name: Test Backend with Newman
        run: |
          cd postman
          npx newman run projet-web-efrei.postman_collection.json -e ENV.postman_environment.json

  build-backend:
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies Backend
        run: |
          cd backend
          npm ci

      - name: Build Backend
        run: |
          cd backend
          npm run build --if-present

      - name: Run Migrate Database (Production)
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/back-chat-app:latest
  
      - name: Deploy Backend on Render
        run: |
          curl -n ${{ secrets.DEPLOY_URL }}

  build-frontend:
    runs-on: ubuntu-latest
    needs: setup-services

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies Frontend
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build --if-present

      - name: Deploy Frontend on Render
        run: |
          curl -n ${{ secrets.DEPLOY_FRONT_URL }}
